__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/melisse/Documents/nailsUp/node_modules/react-native-material-cards/CardAction.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[2], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    CardAction: {
      displayName: "CardAction"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/melisse/Documents/nailsUp/node_modules/react-native-material-cards/CardAction.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var CardAction = _wrapComponent("CardAction")(function (_Component) {
    _inherits(CardAction, _Component);

    function CardAction() {
      _classCallCheck(this, CardAction);

      return _possibleConstructorReturn(this, (CardAction.__proto__ || Object.getPrototypeOf(CardAction)).apply(this, arguments));
    }

    _createClass(CardAction, [{
      key: "renderChildren",
      value: function renderChildren() {
        var returnChildren = this.props.children;

        if (this.props.inColumn === true) {
          returnChildren = _react3.default.Children.map(returnChildren, function (child) {
            if (child.type.name === "CardButton") {
              return _react3.default.cloneElement(child, {
                inColumn: true
              });
            } else {
              return child;
            }
          });
        }

        return returnChildren;
      }
    }, {
      key: "render",
      value: function render() {
        var newStyle = this.props.style || {};
        var directionStyle = this.props.inColumn === true ? styles.cardActionInColumn : styles.cardActionInRow;
        return _react3.default.createElement(
          _reactNative.View,
          {
            style: this.props.seperator && !this.props.isDark ? [directionStyle, styles.seperatorAdd, newStyle] : [directionStyle, newStyle],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          },
          this.renderChildren()
        );
      }
    }]);

    return CardAction;
  }(_react2.Component));

  exports.default = CardAction;

  var styles = _reactNative.StyleSheet.create({
    cardActionInRow: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'flex-start',
      alignSelf: 'stretch'
    },
    cardActionInColumn: {
      flexDirection: 'column',
      alignItems: 'stretch',
      justifyContent: 'flex-start',
      alignSelf: 'stretch'
    },
    seperatorAdd: {
      borderTopColor: '#E9E9E9',
      borderTopWidth: 1
    }
  });
});