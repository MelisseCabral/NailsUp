__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _jsxFileName = "/home/melisse/Documents/nailsUp/node_modules/react-native-material-cards/src/Touchable.js";

  var _react = require(_dependencyMap[0], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _utils = require(_dependencyMap[3], "./utils");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var Touchable = function Touchable(_ref) {
    var onPress = _ref.onPress,
        style = _ref.style,
        children = _ref.children;

    if (_utils.IS_ANDROID && !_utils.IS_LT_LOLLIPOP) {
      return _react2.default.createElement(
        _reactNative.TouchableNativeFeedback,
        {
          background: _reactNative.TouchableNativeFeedback.SelectableBackground(),
          onPress: onPress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 18
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            style: style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          },
          children
        )
      );
    } else {
      return _react2.default.createElement(
        _reactNative.TouchableOpacity,
        {
          onPress: onPress,
          style: style,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 32
          }
        },
        children
      );
    }
  };

  Touchable.propTypes = {
    onPress: _propTypes2.default.func.isRequired,
    style: _reactNative.View.propTypes.style,
    children: _propTypes2.default.node.isRequired
  };
  Touchable.defaultProps = {
    onPress: _utils.noop,
    style: {}
  };
  exports.default = Touchable;
});