__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/home/melisse/Documents/nailsup/node_modules/react-native-material-textinput/lib/Input.js";

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _propTypes = require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _Label = require(_dependencyMap[4], "./Label");

  var _Label2 = _interopRequireDefault(_Label);

  var _Placeholder = require(_dependencyMap[5], "./Placeholder");

  var _Placeholder2 = _interopRequireDefault(_Placeholder);

  var _Underline = require(_dependencyMap[6], "./Underline");

  var _Underline2 = _interopRequireDefault(_Underline);

  var _ErrorHelper = require(_dependencyMap[7], "./ErrorHelper");

  var _ErrorHelper2 = _interopRequireDefault(_ErrorHelper);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    _component: {}
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/melisse/Documents/nailsup/node_modules/react-native-material-textinput/lib/Input.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var _component = _wrapComponent("_component")((_temp = _class = function (_Component) {
    _inherits(_class, _Component);

    function _class(props) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

      _this._handleFocus = function () {
        var onFocus = _this.props.onFocus;

        _this.setState({
          focused: true
        });

        onFocus.apply(undefined, arguments);
      };

      _this._handleBlur = function () {
        var onBlur = _this.props.onBlur;

        _this.setState({
          focused: false
        });

        onBlur.apply(undefined, arguments);
      };

      _this._handleChangeText = function () {
        var _this$props = _this.props,
            onChangeText = _this$props.onChangeText,
            value = _this$props.value;

        if (value == null) {
          _this.setState({
            value: arguments.length <= 0 ? undefined : arguments[0]
          });
        }

        onChangeText.apply(undefined, arguments);
      };

      _this._handleContentSizeChange = function (event) {
        var _this$props2 = _this.props,
            onContentSizeChange = _this$props2.onContentSizeChange,
            fontSize = _this$props2.fontSize;
        var height = event.nativeEvent.contentSize.height;

        _this.setState({
          height: Math.max(fontSize * 1.5, Math.ceil(height))
        });

        onContentSizeChange(event);
      };

      _this.state = {
        value: null,
        focused: false,
        height: props.fontSize * 1.5
      };
      return _this;
    }

    _createClass(_class, [{
      key: "render",
      value: function render() {
        var _state = this.state,
            focused = _state.focused,
            height = _state.height;
        var value = this.props.value != null ? this.props.value : this.state.value;
        var hasValue = value && value.length > 0;
        var active = focused || hasValue;

        var _props = this.props,
            minHeight = _props.minHeight,
            maxHeight = _props.maxHeight,
            marginTop = _props.marginTop,
            marginRight = _props.marginRight,
            marginBottom = _props.marginBottom,
            marginLeft = _props.marginLeft,
            paddingTop = _props.paddingTop,
            paddingRight = _props.paddingRight,
            paddingBottom = _props.paddingBottom,
            paddingLeft = _props.paddingLeft,
            color = _props.color,
            activeColor = _props.activeColor,
            fontFamily = _props.fontFamily,
            fontSize = _props.fontSize,
            fontWeight = _props.fontWeight,
            label = _props.label,
            labelDuration = _props.labelDuration,
            labelColor = _props.labelColor,
            labelActiveTop = _props.labelActiveTop,
            labelActiveColor = _props.labelActiveColor,
            labelActiveScale = _props.labelActiveScale,
            placeholder = _props.placeholder,
            placeholderColor = _props.placeholderColor,
            underlineDuration = _props.underlineDuration,
            underlineHeight = _props.underlineHeight,
            underlineColor = _props.underlineColor,
            underlineActiveColor = _props.underlineActiveColor,
            underlineActiveHeight = _props.underlineActiveHeight,
            error = _props.error,
            errorColor = _props.errorColor,
            errorPaddingTop = _props.errorPaddingTop,
            errorFontSize = _props.errorFontSize,
            props = _objectWithoutProperties(_props, ["minHeight", "maxHeight", "marginTop", "marginRight", "marginBottom", "marginLeft", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "color", "activeColor", "fontFamily", "fontSize", "fontWeight", "label", "labelDuration", "labelColor", "labelActiveTop", "labelActiveColor", "labelActiveScale", "placeholder", "placeholderColor", "underlineDuration", "underlineHeight", "underlineColor", "underlineActiveColor", "underlineActiveHeight", "error", "errorColor", "errorPaddingTop", "errorFontSize"]);

        var labelProps = {
          paddingTop: paddingTop,
          paddingRight: paddingRight,
          paddingBottom: paddingBottom,
          paddingLeft: paddingLeft,
          activeColor: activeColor,
          fontFamily: fontFamily,
          fontSize: fontSize,
          fontWeight: fontWeight,
          label: label,
          labelDuration: labelDuration,
          labelColor: labelColor,
          labelActiveTop: labelActiveTop,
          labelActiveColor: labelActiveColor,
          labelActiveScale: labelActiveScale,
          focused: focused,
          hasValue: hasValue,
          error: error,
          errorColor: errorColor
        };
        var placeholderProps = {
          paddingTop: paddingTop,
          paddingRight: paddingRight,
          paddingBottom: paddingBottom,
          paddingLeft: paddingLeft,
          fontFamily: fontFamily,
          fontSize: fontSize,
          fontWeight: fontWeight,
          placeholder: placeholder,
          placeholderColor: placeholderColor,
          focused: focused,
          hasValue: hasValue
        };
        var underlineProps = {
          activeColor: activeColor,
          underlineDuration: underlineDuration,
          underlineHeight: underlineHeight,
          underlineColor: underlineColor,
          underlineActiveColor: underlineActiveColor,
          underlineActiveHeight: underlineActiveHeight,
          focused: focused,
          error: error,
          errorColor: errorColor
        };
        var containerStyle = {
          marginTop: marginTop,
          marginRight: marginRight,
          marginBottom: marginBottom,
          marginLeft: marginLeft
        };

        if (props.multiline && props.height) {
          height = props.height;
        }

        var inputStyle = _extends({
          minHeight: minHeight,
          maxHeight: maxHeight,
          paddingTop: paddingTop,
          paddingRight: paddingRight,
          paddingBottom: paddingBottom,
          paddingLeft: paddingLeft,
          color: color,
          fontFamily: fontFamily,
          fontSize: fontSize,
          fontWeight: fontWeight
        }, _reactNative.Platform.select({
          ios: {
            height: paddingTop + paddingBottom + (props.multiline ? height : fontSize * 1.5)
          },
          android: {
            height: props.multiline ? height : fontSize * 1.5 + paddingTop + paddingBottom,
            textAlignVertical: 'top'
          }
        }));

        var errorProps = {
          error: error,
          errorColor: errorColor,
          errorPaddingTop: errorPaddingTop,
          errorFontSize: errorFontSize
        };
        return _react3.default.createElement(
          _reactNative.View,
          {
            style: containerStyle,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 183
            }
          },
          _react3.default.createElement(_Label2.default, _extends({}, labelProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 184
            }
          })),
          placeholder ? _react3.default.createElement(_Placeholder2.default, _extends({}, placeholderProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 185
            }
          })) : null,
          _react3.default.createElement(_reactNative.TextInput, _extends({}, props, {
            style: inputStyle,
            underlineColorAndroid: "transparent",
            onFocus: this._handleFocus,
            onBlur: this._handleBlur,
            onChangeText: this._handleChangeText,
            onContentSizeChange: this._handleContentSizeChange,
            value: value,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 186
            }
          })),
          _react3.default.createElement(_Underline2.default, _extends({}, underlineProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 196
            }
          })),
          error ? _react3.default.createElement(_ErrorHelper2.default, _extends({}, errorProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 197
            }
          })) : null
        );
      }
    }]);

    return _class;
  }(_react2.Component), _class.propTypes = _extends({}, _reactNative.TextInput.PropTypes, _ErrorHelper2.default.PropTypes, {
    onFocus: _propTypes2.default.func,
    onBlur: _propTypes2.default.func,
    onChangeText: _propTypes2.default.func,
    onContentSizeChange: _propTypes2.default.func,
    minHeight: _propTypes2.default.number,
    height: _propTypes2.default.number,
    maxHeight: _propTypes2.default.number,
    marginTop: _propTypes2.default.number,
    marginRight: _propTypes2.default.number,
    marginBottom: _propTypes2.default.number,
    marginLeft: _propTypes2.default.number,
    paddingTop: _propTypes2.default.number,
    paddingRight: _propTypes2.default.number,
    paddingBottom: _propTypes2.default.number,
    paddingLeft: _propTypes2.default.number,
    color: _propTypes2.default.string,
    activeColor: _propTypes2.default.string,
    fontFamily: _propTypes2.default.string,
    fontSize: _propTypes2.default.number,
    fontWeight: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
  }), _class.defaultProps = _extends({}, _ErrorHelper2.default.defaultProps, {
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    onChangeText: function onChangeText() {},
    onContentSizeChange: function onContentSizeChange() {},
    value: null,
    marginBottom: 8,
    paddingTop: 20,
    paddingRight: 0,
    paddingBottom: 8,
    paddingLeft: 0,
    color: 'black',
    fontSize: 15,
    fontWeight: 'normal'
  }), _temp));

  exports.default = _component;
});